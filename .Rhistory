scen = 1
# data.frame(scen.params %>% filter(scen.name == scen))
# just to avoid errors in doParallel script below
jobname = "job_1"
i = 1
}
# RUN SIMUL
scen.params
scen.params$N=8000
p = scen.params[ scen.params$scen == scen, names(scen.params) != "scen"]
coef_of_interest = p$coef_of_interest
# show beginning of dataset
if ( i == 1 & verbose == TRUE) cat("\n\nDIM AND HEAD OF P (SINGLE ROW OF SCEN.PARAMS):\n")
# parse methods string
( all.methods = unlist( strsplit( x = p$rep.methods,
split = " ; " ) ) )
# ~ Simulate Dataset ------------------------------
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
( form_string = as.character( sim_obj$form_string ) )
( gold_form_string = as.character( sim_obj$gold_form_string ) )
( beta = as.numeric(sim_obj$beta) )
( exclude_from_imp_model = as.character( sim_obj$exclude_from_imp_model ) )
# coefficient of interest for gold-standard model
if ( coef_of_interest == "(Intercept)" ){
coef_of_interest_gold = "(Intercept)"
} else if ( coef_of_interest == "A:C"){
coef_of_interest_gold = "A1:C1"
} else {
# *this assumes coef_of_interest is always the factual variable
#  (e.g., A), so need to add "1" to use the variable
# that's in gold-standard model
coef_of_interest_gold = paste(coef_of_interest, "1", sep = "")
}
# some methods don't make sense for certain combos of DAG and coef_of_interest
#@this happens when a variable needed for imputation model is also in the target law
#  later could deal with this by adding the variable back into dataset after imputation
if ( (p$dag_name == "1D" & coef_of_interest == "A") |
(p$dag_name == "1B" & coef_of_interest == "A") ) {
all.methods = all.methods[ !all.methods %in% c("MICE-ours", "Am-ours") ]
}
# ~~ MICE-std ----
# details of how mice() implements pmm:
# ?mice.impute.pmm
if ( "MICE-std" %in% all.methods & !is.null(di_std) ) {
imps_mice_std = mice( di_std,
maxit = p$imp_maxit,
m = p$imp_m,
method = p$mice_method,
printFlag = FALSE )
# sanity check
imp1 = complete(imps_mice_std, 1)
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_mice_std = NULL
}
} else {
imps_mice_std = NULL
}
cor(du)
# look at first mice imputation
imp1 = complete(imps_mice_std,1)
cor(imp1) # has CORRECT (0) association between A and B; unexpected
head(dm)
head(d)
head(du)
# because Sherlock 2.0 restores previous workspace
rm( list = ls() )
# are we running locally?
run.local = FALSE
#  run.local = TRUE
# should we set scen params interactively on cluster?
# *if you accidently set this to TRUE and run via sbatches on cluster,
#   they will all run the same scenario!
interactive.cluster.run = FALSE
# should lots of output be printed for each sim rep?
verbose = FALSE
# ~~ Packages -----------------------------------------------
toLoad = c("crayon",
"dplyr",
"foreach",
"doParallel",
"data.table",
"purrr",
"tidyr",
"tibble",
"testthat",
"Hmisc",
"stringr",
"mice",
"Amelia",
"sandwich")
if ( run.local == TRUE | interactive.cluster.run == TRUE ) toLoad = c(toLoad, "here")
# SET UP FOR CLUSTER OR LOCAL RUN ------------------------------
# ~~ Cluster Run ----------------------------------------
if (run.local == FALSE ) {
# load command line arguments
args = commandArgs(trailingOnly = TRUE)
cat("\n\n args received from sbatch file:", args)
jobname = args[1]
scen = args[2]  # this will be a number
# load packages with informative messages if one can't be installed
# **Common reason to get the "could not library" error: You did ml load R/XXX using an old version
any.failed = FALSE
for (pkg in toLoad) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
cat( paste("\n*** COULD NOT LOAD PACKAGE:", pkg) )
any.failed <<- TRUE
})
}
if ( any.failed == TRUE ) stop("Some packages couldn't be loaded. See outfile for details of which ones.")
# helper code
path = "/home/groups/manishad/IWN"
setwd(path)
source("helper_IWN.R")
# get scen parameters (made by genSbatch.R)
setwd(path)
scen.params = read.csv( "scen_params.csv" )
p <<- scen.params[ scen.params$scen == scen, ]
cat("\n\nHEAD OF ENTIRE SCEN.PARAMS:\n")
print(p)
# ~~*********** Set cluster sim reps ----------------
# simulation reps to run within this job
# **this need to match n.reps.in.doParallel in the genSbatch script
sim.reps = 50
# set the number of cores
registerDoParallel(cores=16)
}
# FOR LOCAL USE  ------------------------------
if ( run.local == TRUE ) {
lapply( toLoad,
require,
character.only = TRUE)
# helper fns
code.dir = here()
setwd(code.dir)
source("helper_IWN.R")
# for saving intermediate results
data.dir = str_replace( string = here(),
pattern = "Simulation code",
replacement = "Simulation results" )
# ~~ ********** Set Sim Params: Local Run -----------------------------
scen.params = tidyr::expand_grid(
#rep.methods = "gold ; CC ; MICE-std ; Am-std ; MICE-ours ; MICE-ours-pred ; Am-ours",
rep.methods = "gold ; MICE-std ; Am-std",
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
# MICE parameters
# as on cluster
imp_m = 5,  # CURRENTLY SET LOW
imp_maxit = 100,
mice_method = "norm",
# # for quicker sims
# imp_m = 5,
# imp_maxit = 5,
# N = c(100),
#dag_name = c( "1B", "1D", "1G", "1H" ),
dag_name = "1J"
)
# scen.params = tidyr::expand_grid(
#
#   #rep.methods = "gold ; CC ; MICE-std ; Am-std ; MICE-ours ; MICE-ours-pred ; Am-ours",
#   rep.methods = "MICE-std",
#
#   model = "OLS",
#   #coef_of_interest = c( "(Intercept)", "A"),  # "(Intercept)" or "A"
#   coef_of_interest = "A",
#   N = c(1000),
#
#   # MICE parameters
#   # as on cluster
#   imp_m = 50,  # also for Amelia
#   imp_maxit = 100,
#   mice_method = "norm",
#
#   # # for quicker sims
#   # imp_m = 5,
#   # imp_maxit = 5,
#   # N = c(100),
#
#   #dag_name = c( "1B", "1D", "1G", "1H" ),
#   dag_name = "1B"
# )
# remove combos that aren't implemented
scen.params = scen.params %>% filter( !(dag_name %in% c("1G", "1H", "1F") &
coef_of_interest == "(Intercept)") )
start.at = 1  # scen name to start at
scen.params$scen = start.at:( nrow(scen.params) + start.at - 1 )
sim.reps = 1  # reps to run in this iterate
# set the number of local cores
registerDoParallel(cores=8)
scen = 1
# data.frame(scen.params %>% filter(scen.name == scen))
# just to avoid errors in doParallel script below
jobname = "job_1"
i = 1
}
# mimic Sherlock structure
if (run.local == TRUE) ( scens_to_run = scen.params$scen )
if (run.local == FALSE) ( scens_to_run = scen )  # from sbatch
# only print info for first sim rep for visual clarity
if ( i == 1 ) cat("\n\n~~~~~~~~~~~~~~~~ BEGIN SIM REP", i, "~~~~~~~~~~~~~~~~")
# results for just this simulation rep
if ( exists("rep.res") ) suppressWarnings( rm(rep.res) )
# extract simulation params for this scenario (row)
# exclude the column with the scenario name itself (col)
if ( verbose == TRUE ) {
cat("\n\n scen variable:\n")
print(scen)
cat("\n\n scen.params again:\n")
print(scen.params)
}
p = scen.params[ scen.params$scen == scen, names(scen.params) != "scen"]
run.local=T
# results for just this simulation rep
if ( exists("rep.res") ) suppressWarnings( rm(rep.res) )
# extract simulation params for this scenario (row)
# exclude the column with the scenario name itself (col)
if ( verbose == TRUE ) {
cat("\n\n scen variable:\n")
print(scen)
cat("\n\n scen.params again:\n")
print(scen.params)
}
p = scen.params[ scen.params$scen == scen, names(scen.params) != "scen"]
# FOR LOCAL USE  ------------------------------
if ( run.local == TRUE ) {
lapply( toLoad,
require,
character.only = TRUE)
# helper fns
code.dir = here()
setwd(code.dir)
source("helper_IWN.R")
# for saving intermediate results
data.dir = str_replace( string = here(),
pattern = "Simulation code",
replacement = "Simulation results" )
# ~~ ********** Set Sim Params: Local Run -----------------------------
scen.params = tidyr::expand_grid(
#rep.methods = "gold ; CC ; MICE-std ; Am-std ; MICE-ours ; MICE-ours-pred ; Am-ours",
rep.methods = "gold ; MICE-std ; Am-std",
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
# MICE parameters
# as on cluster
imp_m = 5,  # CURRENTLY SET LOW
imp_maxit = 100,
mice_method = "norm",
# # for quicker sims
# imp_m = 5,
# imp_maxit = 5,
# N = c(100),
#dag_name = c( "1B", "1D", "1G", "1H" ),
dag_name = "1J"
)
# scen.params = tidyr::expand_grid(
#
#   #rep.methods = "gold ; CC ; MICE-std ; Am-std ; MICE-ours ; MICE-ours-pred ; Am-ours",
#   rep.methods = "MICE-std",
#
#   model = "OLS",
#   #coef_of_interest = c( "(Intercept)", "A"),  # "(Intercept)" or "A"
#   coef_of_interest = "A",
#   N = c(1000),
#
#   # MICE parameters
#   # as on cluster
#   imp_m = 50,  # also for Amelia
#   imp_maxit = 100,
#   mice_method = "norm",
#
#   # # for quicker sims
#   # imp_m = 5,
#   # imp_maxit = 5,
#   # N = c(100),
#
#   #dag_name = c( "1B", "1D", "1G", "1H" ),
#   dag_name = "1B"
# )
# remove combos that aren't implemented
scen.params = scen.params %>% filter( !(dag_name %in% c("1G", "1H", "1F") &
coef_of_interest == "(Intercept)") )
start.at = 1  # scen name to start at
scen.params$scen = start.at:( nrow(scen.params) + start.at - 1 )
sim.reps = 1  # reps to run in this iterate
# set the number of local cores
registerDoParallel(cores=8)
scen = 1
# data.frame(scen.params %>% filter(scen.name == scen))
# just to avoid errors in doParallel script below
jobname = "job_1"
i = 1
}
# should we set scen params interactively on cluster?
# *if you accidently set this to TRUE and run via sbatches on cluster,
#   they will all run the same scenario!
interactive.cluster.run = FALSE
# should lots of output be printed for each sim rep?
verbose = FALSE
# ~~ Packages -----------------------------------------------
toLoad = c("crayon",
"dplyr",
"foreach",
"doParallel",
"data.table",
"purrr",
"tidyr",
"tibble",
"testthat",
"Hmisc",
"stringr",
"mice",
"Amelia",
"sandwich")
if ( run.local == TRUE | interactive.cluster.run == TRUE ) toLoad = c(toLoad, "here")
# SET UP FOR CLUSTER OR LOCAL RUN ------------------------------
# ~~ Cluster Run ----------------------------------------
if (run.local == FALSE ) {
# load command line arguments
args = commandArgs(trailingOnly = TRUE)
cat("\n\n args received from sbatch file:", args)
jobname = args[1]
scen = args[2]  # this will be a number
# load packages with informative messages if one can't be installed
# **Common reason to get the "could not library" error: You did ml load R/XXX using an old version
any.failed = FALSE
for (pkg in toLoad) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
cat( paste("\n*** COULD NOT LOAD PACKAGE:", pkg) )
any.failed <<- TRUE
})
}
if ( any.failed == TRUE ) stop("Some packages couldn't be loaded. See outfile for details of which ones.")
# helper code
path = "/home/groups/manishad/IWN"
setwd(path)
source("helper_IWN.R")
# get scen parameters (made by genSbatch.R)
setwd(path)
scen.params = read.csv( "scen_params.csv" )
p <<- scen.params[ scen.params$scen == scen, ]
cat("\n\nHEAD OF ENTIRE SCEN.PARAMS:\n")
print(p)
# ~~*********** Set cluster sim reps ----------------
# simulation reps to run within this job
# **this need to match n.reps.in.doParallel in the genSbatch script
sim.reps = 50
# set the number of cores
registerDoParallel(cores=16)
}
# FOR LOCAL USE  ------------------------------
if ( run.local == TRUE ) {
lapply( toLoad,
require,
character.only = TRUE)
# helper fns
code.dir = here()
setwd(code.dir)
source("helper_IWN.R")
# for saving intermediate results
data.dir = str_replace( string = here(),
pattern = "Simulation code",
replacement = "Simulation results" )
# ~~ ********** Set Sim Params: Local Run -----------------------------
scen.params = tidyr::expand_grid(
#rep.methods = "gold ; CC ; MICE-std ; Am-std ; MICE-ours ; MICE-ours-pred ; Am-ours",
rep.methods = "gold ; MICE-std ; Am-std",
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
# MICE parameters
# as on cluster
imp_m = 5,  # CURRENTLY SET LOW
imp_maxit = 100,
mice_method = "norm",
# # for quicker sims
# imp_m = 5,
# imp_maxit = 5,
# N = c(100),
#dag_name = c( "1B", "1D", "1G", "1H" ),
dag_name = "1J"
)
# scen.params = tidyr::expand_grid(
#
#   #rep.methods = "gold ; CC ; MICE-std ; Am-std ; MICE-ours ; MICE-ours-pred ; Am-ours",
#   rep.methods = "MICE-std",
#
#   model = "OLS",
#   #coef_of_interest = c( "(Intercept)", "A"),  # "(Intercept)" or "A"
#   coef_of_interest = "A",
#   N = c(1000),
#
#   # MICE parameters
#   # as on cluster
#   imp_m = 50,  # also for Amelia
#   imp_maxit = 100,
#   mice_method = "norm",
#
#   # # for quicker sims
#   # imp_m = 5,
#   # imp_maxit = 5,
#   # N = c(100),
#
#   #dag_name = c( "1B", "1D", "1G", "1H" ),
#   dag_name = "1B"
# )
# remove combos that aren't implemented
scen.params = scen.params %>% filter( !(dag_name %in% c("1G", "1H", "1F") &
coef_of_interest == "(Intercept)") )
start.at = 1  # scen name to start at
scen.params$scen = start.at:( nrow(scen.params) + start.at - 1 )
sim.reps = 1  # reps to run in this iterate
# set the number of local cores
registerDoParallel(cores=8)
scen = 1
# data.frame(scen.params %>% filter(scen.name == scen))
# just to avoid errors in doParallel script below
jobname = "job_1"
i = 1
}
.p = data.frame(
#rep.methods = "gold ; CC ; MICE-std ; Am-std ; MICE-ours ; MICE-ours-pred ; Am-ours",
rep.methods = "gold ; MICE-std ; Am-std",
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
# MICE parameters
# as on cluster
imp_m = 5,  # CURRENTLY SET LOW
imp_maxit = 100,
mice_method = "norm",
# # for quicker sims
# imp_m = 5,
# imp_maxit = 5,
# N = c(100),
#dag_name = c( "1B", "1D", "1G", "1H" ),
dag_name = "1J"
)
sim_data(.p)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
head(du)
cor(du %>% select(A1, B1, C1, D1))
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
cor(du %>% select(A1, B1, C1, D1))
