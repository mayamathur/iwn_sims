cormat = cor( du %>% select( all_of(keepers) ) )
if ( .dag_name == "1J" ) keepers = c("A1", "B1", "C1", "D1", "RA", "RB")
cormat = cor( du %>% select( all_of(keepers) ) )
cormat = round(cormat,2)
cormat[ !upper.tri(cormat) ] = NA
xtable(cormat)
cormat
table(du$RA)
table(du$RB)
.dag_name
# subset to variables of interest
if ( .dag_name == "1B" ) keepers = c("A1", "B1", "C1", "RA")
if ( .dag_name == "1D" ) keepers = c("A1", "B1", "C1", "RA", "RB")
if ( .dag_name == "1Fb" ) keepers = c("A1", "B1", "D1", "RB")
if ( .dag_name == "1J" ) keepers = c("A1", "B1", "C1", "D1", "RC", "RD")
cormat = cor( du %>% select( all_of(keepers) ) )
cormat = round(cormat,2)
cormat[ !upper.tri(cormat) ] = NA
xtable(cormat)
# note: in stats_for_paper, nodes are relabeled to match paper rather than code
update_result_csv(name = paste( "DAG ", .dag_name, " mean RD", sep = "" ),
value = round( mean(du$RC), 2) )
update_result_csv(name = paste( "DAG ", .dag_name, " mean RE", sep = "" ),
value = round( mean(du$RD), 2) )
vr()
rm(list=ls())
# PRELIMINARIES ---------------------------------------------------------------
# This script uses renv to preserve the R environment specs (e.g., package versions.)
library(renv)
# run this if you want to reproduce results using the R environment we had:
# renv::restore()
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# run this only if you want to update the R environment specs
# renv::snapshot()
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
results.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
setwd(results.dir)  # check it
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
setwd(overleaf.dir.stats)  # check it
# get helper fns
setwd(code.dir)
source("helper_IWN.R")
# no sci notation
options(scipen=999)
# get simulation data
# already aggregated by stitch_on_sherlock_IWN.R
# MAIN RESULTS TABLE ---------------------------------------------------------------
setwd(data.dir)
aggo = read_excel("2024-06-24 agg.xlsx")
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method_pretty)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = agg %>% filter(method %in% method_keepers)
agg = droplevels(agg)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover) %>%
arrange( dag_name_pretty, coef_of_interest_pretty, method_pretty )
View(t)
print( xtable(t), include.rownames = FALSE)
# INVESTIGATE DAG (D) - FILE MATCHING ---------------------------------------------------------------
# Q: Why does MICE have dramatically higher coverage than Amelia? Is its CI much wider?
# A: Yes
setwd(data.dir)
s = fread("stitched.csv")
s %>% filter(dag_name == "1J") %>%
group_by(method) %>%
summarise( mean(bhat_lo),
mean(bhat_hi),
mean(bhat_width))
# Q: Why does MICE have dramatically higher coverage than Amelia? Is its CI much wider?
# A: Yes
setwd(data.dir)
s = fread("stitched.csv")
s %>% filter(dag_name == "1J") %>%
group_by(method) %>%
summarise( mean(bhat_lo),
mean(bhat_hi),
mean(bhat_width))
table(s$method)
temp = s %>% filter(dag_name == "1J" & method == "Am-std")
table( temp$overall.error )
temp = s %>% filter(dag_name == "1J" & method == "MICE-std")
table( temp$overall.error )
table(s$overall.error)
table(s$overall.error)
temp = s %>% filter(overall.error == "0 (non-NA) cases")
names(s)
temp %>% group_by(dag_name, coef_of_interest, method) %>%
summarise(n())
names(agg)
dim(s)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
aggo = make_agg_data(s = s)
aggo$BhatFail
View(aggo %>% filter(BhatFail == 1))
rm(list=ls())
# PRELIMINARIES ---------------------------------------------------------------
# This script uses renv to preserve the R environment specs (e.g., package versions.)
library(renv)
# run this if you want to reproduce results using the R environment we had:
# renv::restore()
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# run this only if you want to update the R environment specs
# renv::snapshot()
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
results.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
setwd(results.dir)  # check it
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
setwd(overleaf.dir.stats)  # check it
# get helper fns
setwd(code.dir)
source("helper_IWN.R")
# no sci notation
options(scipen=999)
# get simulation data
# already aggregated by stitch_on_sherlock_IWN.R
# read in datasets
setwd(data.dir)
s = fread("stitched.csv")
aggo = make_agg_data(s)
names(aggo)
agg = wrangle_agg_data(.aggo = aggo)
names(s)
table(s$dag_name, s$coef_of_interest)
# SANTY CHECKS ---------------------------------------------------------------
### Error messages from missingness methods
table(s$overall.error)
temp = s %>% filter(overall.error == "0 (non-NA) cases")
# which scenarios produce the 0 non-NA cases?
temp %>% group_by(dag_name, coef_of_interest, method) %>%
summarise(n())
aggo = make_agg_data(s = s)
aggo %>% filter(dag_name == "1J")
aggo$reps
table(aggo$reps)
### Error messages from missingness methods
table(s$overall.error)
# which scenarios produce the 0 non-NA cases?
temp %>% group_by(dag_name, coef_of_interest, method) %>%
summarise(n())
# which scenarios produce the 0 non-NA cases?
as.data.frame( temp %>% group_by(dag_name, coef_of_interest, method) %>%
summarise(n()) )
nrow(s)
aggo = make_agg_data(s)
agg = wrangle_agg_data(.aggo = aggo)
debug(wrangle_agg_data)
agg = wrangle_agg_data(.aggo = aggo)
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
aggo = make_agg_data(s)
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method)
setwd(data.dir)
setwd(data.dir)
write.xlsx(agg, "agg.xlsx") )
write.xlsx(agg, "agg.xlsx")
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
write.xlsx(agg, "agg.xlsx")
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl",
"xlsx")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
results.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
setwd(results.dir)  # check it
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
write.xlsx(agg, "agg.xlsx")
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl",
"xlsx")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
install.packages("xlsx")
library(xlsx)
rm(list=ls())
# This script uses renv to preserve the R environment specs (e.g., package versions.)
library(renv)
# run this if you want to reproduce results using the R environment we had:
# renv::restore()
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# run this only if you want to update the R environment specs
# renv::snapshot()
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/2024-07-30 - as in first journal submission",
pattern = "Simulation code" )
results.dir = str_replace_all( string = here(),
replacement = "Simulation results/2024-07-30 - as in first journal submission",
pattern = "Simulation code" )
setwd(results.dir)  # check it
# below is the only absolute path
# write results directly to directory containing TeX manuscript in Overleaf so stats can be piped directly into text
# this is an absolute path because it must live in Dropbox, outside the project directory, in order to sync with Overleaf
# to reproduce results, just set this to any directory on your local machine
# results will be written to a csv file in that location
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
setwd(overleaf.dir.stats)  # check it
# get helper fns
setwd(code.dir)
source("helper_IWN.R")
# no sci notation
options(scipen=999)
# get simulation data
# already aggregated by stitch_on_sherlock_IWN.R
# read in datasets
setwd(data.dir)
s = fread("stitched.csv")
data.dir
here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/2024-07-30 - as in first journal submission",
pattern = "Code" )
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/2024-07-30 - as in first journal submission",
pattern = "Code" )
data.dir
results.dir = str_replace_all( string = here(),
replacement = "Simulation results/2024-07-30 - as in first journal submission",
pattern = "Code" )
setwd(results.dir)  # check it
here()
results.dir
data.dir = str_replace_all( string = here(),
replacement = "Results/2024-07-30 - as in first journal submission",
pattern = "Code" )
results.dir = str_replace_all( string = here(),
replacement = "Results/2024-07-30 - as in first journal submission",
pattern = "Code" )
setwd(results.dir)  # check it
# below is the only absolute path
# write results directly to directory containing TeX manuscript in Overleaf so stats can be piped directly into text
# this is an absolute path because it must live in Dropbox, outside the project directory, in order to sync with Overleaf
# to reproduce results, just set this to any directory on your local machine
# results will be written to a csv file in that location
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
setwd(overleaf.dir.stats)  # check it
# get helper fns
setwd(code.dir)
source("helper_IWN.R")
# no sci notation
options(scipen=999)
# get simulation data
# already aggregated by stitch_on_sherlock_IWN.R
# read in datasets
setwd(data.dir)
s = fread("stitched.csv")
# check when it was created
file.info("stitched.csv")$ctime
# SANITY CHECKS ---------------------------------------------------------------
### Error messages from missingness methods
table(s$overall.error)
temp = s %>% filter(overall.error == "0 (non-NA) cases")
# which scenarios produce the 0 non-NA cases?
# oh, it's just CC in the DAG that has no complete cases - makes sense :)
as.data.frame( temp %>% group_by(dag_name, coef_of_interest, method) %>%
summarise(n()) )
# check reps per scenario
t = s %>% group_by(scen.name, method) %>%
summarise( n() )
table(t$`n()`)
temp = s %>% filter(overall.error == "0 (non-NA) cases")
temp
### Error messages from missingness methods
table(s$overall.error)
# check reps per scenario
t = s %>% group_by(scen.name, method) %>%
summarise( n() )
table(t$`n()`)
# MAKE AGG DATA ---------------------------------------------------------------
aggo = make_agg_data(s)
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method_pretty)
setwd(data.dir)
fwrite(agg, "agg.csv")
rm(list=ls())
library(renv)
# run this if you want to reproduce results using the R environment we had:
# renv::restore()
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# run this only if you want to update the R environment specs
# renv::snapshot()
renv::snapshot()
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Results/2024-07-30 - as in first journal submission",
pattern = "Code" )
results.dir = str_replace_all( string = here(),
replacement = "Results/2024-07-30 - as in first journal submission",
pattern = "Code" )
setwd(results.dir)  # check it
# # generic dirs (save)
# data.dir = str_replace_all( string = here(),
#                    replacement = "Simulation results/Working results",
#                    pattern = "Simulation code" )
#
# results.dir = str_replace_all( string = here(),
#                                replacement = "Simulation results/Working results",
#                                pattern = "Simulation code" )
# setwd(results.dir)  # check it
# below is the only absolute path
# write results directly to directory containing TeX manuscript in Overleaf so stats can be piped directly into text
# this is an absolute path because it must live in Dropbox, outside the project directory, in order to sync with Overleaf
# to reproduce results, just set this to any directory on your local machine
# results will be written to a csv file in that location
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
setwd(overleaf.dir.stats)  # check it
# get helper fns
setwd(code.dir)
source("helper_IWN.R")
# no sci notation
options(scipen=999)
# read in dataset
setwd(data.dir)
agg = fread("agg.csv")
# check when it was created
file.info("agg.csv")$ctime
# MAIN RESULTS TABLE ---------------------------------------------------------------
table(agg$method_pretty)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = agg %>% filter(method %in% method_keepers)
agg = droplevels(agg)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover) %>%
arrange( dag_name_pretty, coef_of_interest_pretty, method_pretty )
View(t)
print( xtable(t), include.rownames = FALSE)
