agg$dag_name_pretty[ agg$dag_name == "1Fb" ] = "DAG (c)"
agg$method_pretty = agg$method
agg$method_pretty[ agg$method == "gold" ] = "Benchmark"
agg$method_pretty[ agg$method == "CC" ] = "Complete-case"
agg$method_pretty[ agg$method == "Am-std" ] = "Amelia (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "Amelia (m-backdoor)"
agg$method_pretty[ agg$method == "MICE-std" ] = "MICE (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "MICE (m-backdoor)"
return(agg)
}
wrangle_agg_data = function(.aggo) {
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$coef_of_interest == "A"] = "E[B | A]"
# check it
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
agg$dag_name_pretty = agg$dag_name
agg$dag_name_pretty[ agg$dag_name == "1B" ] = "DAG (a)"
agg$dag_name_pretty[ agg$dag_name == "1D" ] = "DAG (b)"
agg$dag_name_pretty[ agg$dag_name == "1Fb" ] = "DAG (c)"
agg$method_pretty = agg$method
agg$method_pretty[ agg$method == "gold" ] = "Benchmark"
agg$method_pretty[ agg$method == "CC" ] = "Complete-case"
agg$method_pretty[ agg$method == "Am-std" ] = "Amelia (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "Amelia (m-backdoor)"
agg$method_pretty[ agg$method == "MICE-std" ] = "MICE (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "MICE (m-backdoor)"
return(agg)
}
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method)
table(agg$method_pretty)
.aggo = aggo
wrangle_agg_data = function(.aggo) {
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$coef_of_interest == "A"] = "E[B | A]"
# check it
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
agg$dag_name_pretty = agg$dag_name
agg$dag_name_pretty[ agg$dag_name == "1B" ] = "DAG (a)"
agg$dag_name_pretty[ agg$dag_name == "1D" ] = "DAG (b)"
agg$dag_name_pretty[ agg$dag_name == "1Fb" ] = "DAG (c)"
agg$method_pretty = agg$method
agg$method_pretty[ agg$method == "gold" ] = "Benchmark"
agg$method_pretty[ agg$method == "CC" ] = "Complete-case"
agg$method_pretty[ agg$method == "Am-std" ] = "Amelia (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "Amelia (m-backdoor)"
agg$method_pretty[ agg$method == "MICE-std" ] = "MICE (standard)"
agg$method_pretty[ agg$method == "MICE-ours" ] = "MICE (m-backdoor)"
return(agg)
}
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method_pretty)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = agg %>% filter(method %in% method_keepers)
agg = droplevels(agg)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover)
View(t)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover) %>%
arrange( method_pretty )
View(t)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover) %>%
arrange( dag_name_pretty, coef_of_interest_pretty, method_pretty )
View(t)
t %>%
group_by(grp = (row_number() + 1) %/% 2 ) %>%
group_modify(~ add_row(.x, x = rep(NA, ncol(t)))) %>%
ungroup() %>%
select(-grp)
# insert spacer rows for legibility
t = t %>% add_row(.after = 6,
NA)
?add_row
# insert spacer rows for legibility
t = t %>% add_row(.after = 6,
all_of(names(t)) = NA)
dput(names(t))
xtable(t)
print( xtable(t), row.names = FALSE)
print( xtable(t), include.rownames = FALSE)
?print.xtable
# PRELIMINARIES ---------------------------------------------------------------
# This script uses renv to preserve the R environment specs (e.g., package versions.)
library(renv)
# run this if you want to reproduce results using the R environment we had:
# renv::restore()
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# run this only if you want to update the R environment specs
# renv::snapshot()
# set working directories
code.dir = here()
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
results.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
setwd(results.dir)  # check it
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
setwd(overleaf.dir.stats)  # check it
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
setwd(data.dir)
aggo = read_excel("2024-06-24 agg.xlsx")
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method_pretty)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = agg %>% filter(method %in% method_keepers)
agg = droplevels(agg)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover) %>%
arrange( dag_name_pretty, coef_of_interest_pretty, method_pretty )
View(t)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method_pretty)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = agg %>% filter(method %in% method_keepers)
agg = droplevels(agg)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover) %>%
arrange( dag_name_pretty, coef_of_interest_pretty, method_pretty )
View(t)
setwd(data.dir)
s = fread("stitched.csv")
dim(s)
names(s)
s %>% filter(dag_name == "1J") %>%
group_by(method_pretty) %>%
summarise( mean(bhat_lo),
mean(bhat_hi),
mean(bhat_width))
s %>% filter(dag_name == "1J") %>%
group_by(method) %>%
summarise( mean(bhat_lo),
mean(bhat_hi),
mean(bhat_width))
print( xtable(t), include.rownames = FALSE)
View(t)
# pick DAG name: 1B, 1D, 1Fb, 1J
.dag_name = "1J"
# we just want one dataset; using NAs for sim params that don't matter in this context
p = tidyr::expand_grid(
rep.methods = NA,
model = "OLS",
coef_of_interest = "A",
imp_m = NA,
imp_maxit = NA,
mice_method = NA,
dag_name = c( .dag_name ),
N = c(100000)
)
sim_obj = sim_data(.p = p)
sim_obj = sim_data(.p = p)
du = sim_obj$du
# ~ Correlation matrix ------------------------------
# subset to variables of interest
if ( .dag_name == "1B" ) keepers = c("A1", "B1", "C1", "RA")
if ( .dag_name == "1D" ) keepers = c("A1", "B1", "C1", "RA", "RB")
if ( .dag_name == "1Fb" ) keepers = c("A1", "B1", "D1", "RB")
if ( .dag_name == "1J" ) keepers = c("A1", "B1", "D1", "E1", "RA", "RB")
cormat = cor( du %>% select( all_of(keepers) ) )
if ( .dag_name == "1J" ) keepers = c("A1", "B1", "C1", "D1", "RA", "RB")
cormat = cor( du %>% select( all_of(keepers) ) )
cormat = round(cormat,2)
cormat[ !upper.tri(cormat) ] = NA
xtable(cormat)
cormat
table(du$RA)
table(du$RB)
.dag_name
# subset to variables of interest
if ( .dag_name == "1B" ) keepers = c("A1", "B1", "C1", "RA")
if ( .dag_name == "1D" ) keepers = c("A1", "B1", "C1", "RA", "RB")
if ( .dag_name == "1Fb" ) keepers = c("A1", "B1", "D1", "RB")
if ( .dag_name == "1J" ) keepers = c("A1", "B1", "C1", "D1", "RC", "RD")
cormat = cor( du %>% select( all_of(keepers) ) )
cormat = round(cormat,2)
cormat[ !upper.tri(cormat) ] = NA
xtable(cormat)
# note: in stats_for_paper, nodes are relabeled to match paper rather than code
update_result_csv(name = paste( "DAG ", .dag_name, " mean RD", sep = "" ),
value = round( mean(du$RC), 2) )
update_result_csv(name = paste( "DAG ", .dag_name, " mean RE", sep = "" ),
value = round( mean(du$RD), 2) )
vr()
rm(list=ls())
# PRELIMINARIES ---------------------------------------------------------------
# This script uses renv to preserve the R environment specs (e.g., package versions.)
library(renv)
# run this if you want to reproduce results using the R environment we had:
# renv::restore()
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# run this only if you want to update the R environment specs
# renv::snapshot()
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
results.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
setwd(results.dir)  # check it
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
setwd(overleaf.dir.stats)  # check it
# get helper fns
setwd(code.dir)
source("helper_IWN.R")
# no sci notation
options(scipen=999)
# get simulation data
# already aggregated by stitch_on_sherlock_IWN.R
# MAIN RESULTS TABLE ---------------------------------------------------------------
setwd(data.dir)
aggo = read_excel("2024-06-24 agg.xlsx")
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method_pretty)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = agg %>% filter(method %in% method_keepers)
agg = droplevels(agg)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover) %>%
arrange( dag_name_pretty, coef_of_interest_pretty, method_pretty )
View(t)
print( xtable(t), include.rownames = FALSE)
# INVESTIGATE DAG (D) - FILE MATCHING ---------------------------------------------------------------
# Q: Why does MICE have dramatically higher coverage than Amelia? Is its CI much wider?
# A: Yes
setwd(data.dir)
s = fread("stitched.csv")
s %>% filter(dag_name == "1J") %>%
group_by(method) %>%
summarise( mean(bhat_lo),
mean(bhat_hi),
mean(bhat_width))
# Q: Why does MICE have dramatically higher coverage than Amelia? Is its CI much wider?
# A: Yes
setwd(data.dir)
s = fread("stitched.csv")
s %>% filter(dag_name == "1J") %>%
group_by(method) %>%
summarise( mean(bhat_lo),
mean(bhat_hi),
mean(bhat_width))
table(s$method)
temp = s %>% filter(dag_name == "1J" & method == "Am-std")
table( temp$overall.error )
temp = s %>% filter(dag_name == "1J" & method == "MICE-std")
table( temp$overall.error )
table(s$overall.error)
table(s$overall.error)
temp = s %>% filter(overall.error == "0 (non-NA) cases")
names(s)
temp %>% group_by(dag_name, coef_of_interest, method) %>%
summarise(n())
names(agg)
dim(s)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
aggo = make_agg_data(s = s)
aggo$BhatFail
View(aggo %>% filter(BhatFail == 1))
rm(list=ls())
# PRELIMINARIES ---------------------------------------------------------------
# This script uses renv to preserve the R environment specs (e.g., package versions.)
library(renv)
# run this if you want to reproduce results using the R environment we had:
# renv::restore()
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# run this only if you want to update the R environment specs
# renv::snapshot()
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
results.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
setwd(results.dir)  # check it
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
setwd(overleaf.dir.stats)  # check it
# get helper fns
setwd(code.dir)
source("helper_IWN.R")
# no sci notation
options(scipen=999)
# get simulation data
# already aggregated by stitch_on_sherlock_IWN.R
# read in datasets
setwd(data.dir)
s = fread("stitched.csv")
aggo = make_agg_data(s)
names(aggo)
agg = wrangle_agg_data(.aggo = aggo)
names(s)
table(s$dag_name, s$coef_of_interest)
# SANTY CHECKS ---------------------------------------------------------------
### Error messages from missingness methods
table(s$overall.error)
temp = s %>% filter(overall.error == "0 (non-NA) cases")
# which scenarios produce the 0 non-NA cases?
temp %>% group_by(dag_name, coef_of_interest, method) %>%
summarise(n())
aggo = make_agg_data(s = s)
aggo %>% filter(dag_name == "1J")
aggo$reps
table(aggo$reps)
### Error messages from missingness methods
table(s$overall.error)
# which scenarios produce the 0 non-NA cases?
temp %>% group_by(dag_name, coef_of_interest, method) %>%
summarise(n())
# which scenarios produce the 0 non-NA cases?
as.data.frame( temp %>% group_by(dag_name, coef_of_interest, method) %>%
summarise(n()) )
nrow(s)
aggo = make_agg_data(s)
agg = wrangle_agg_data(.aggo = aggo)
debug(wrangle_agg_data)
agg = wrangle_agg_data(.aggo = aggo)
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
aggo = make_agg_data(s)
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method)
setwd(data.dir)
setwd(data.dir)
write.xlsx(agg, "agg.xlsx") )
write.xlsx(agg, "agg.xlsx")
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
write.xlsx(agg, "agg.xlsx")
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl",
"xlsx")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
results.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
setwd(results.dir)  # check it
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
write.xlsx(agg, "agg.xlsx")
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl",
"xlsx")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
install.packages("xlsx")
library(xlsx)
