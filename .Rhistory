}
if ( any.failed == TRUE ) stop("Some packages couldn't be loaded. See outfile for details of which ones.")
# helper code
path = "/home/groups/manishad/IWN"
setwd(path)
source("helper_IWN.R")
# get scen parameters (made by genSbatch.R)
setwd(path)
scen.params = read.csv( "scen_params.csv" )
p <<- scen.params[ scen.params$scen == scen, ]
cat("\n\nHEAD OF ENTIRE SCEN.PARAMS:\n")
print(p)
# ~~*********** Set cluster sim reps ----------------
# simulation reps to run within this job
# **this need to match n.reps.in.doParallel in the genSbatch script
sim.reps = 50
# set the number of cores
registerDoParallel(cores=16)
}
# FOR LOCAL USE  ------------------------------
if ( run.local == TRUE ) {
lapply( toLoad,
require,
character.only = TRUE)
# helper fns
code.dir = here()
setwd(code.dir)
source("helper_IWN.R")
# for saving intermediate results
data.dir = str_replace( string = here(),
pattern = "Simulation code",
replacement = "Simulation results" )
# ~~ ********** Set Sim Params: Local Run -----------------------------
scen.params = tidyr::expand_grid(
#rep.methods = "gold ; CC ; MICE-std ; Am-std ; MICE-ours ; MICE-ours-pred ; Am-ours",
rep.methods = "gold ; MICE-std ; Am-std",
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
# MICE parameters
# as on cluster
imp_m = 5,  # CURRENTLY SET LOW
imp_maxit = 100,
mice_method = "norm",
# # for quicker sims
# imp_m = 5,
# imp_maxit = 5,
# N = c(100),
#dag_name = c( "1B", "1D", "1G", "1H" ),
dag_name = "1J"
)
# scen.params = tidyr::expand_grid(
#
#   #rep.methods = "gold ; CC ; MICE-std ; Am-std ; MICE-ours ; MICE-ours-pred ; Am-ours",
#   rep.methods = "MICE-std",
#
#   model = "OLS",
#   #coef_of_interest = c( "(Intercept)", "A"),  # "(Intercept)" or "A"
#   coef_of_interest = "A",
#   N = c(1000),
#
#   # MICE parameters
#   # as on cluster
#   imp_m = 50,  # also for Amelia
#   imp_maxit = 100,
#   mice_method = "norm",
#
#   # # for quicker sims
#   # imp_m = 5,
#   # imp_maxit = 5,
#   # N = c(100),
#
#   #dag_name = c( "1B", "1D", "1G", "1H" ),
#   dag_name = "1B"
# )
# remove combos that aren't implemented
scen.params = scen.params %>% filter( !(dag_name %in% c("1G", "1H", "1F") &
coef_of_interest == "(Intercept)") )
start.at = 1  # scen name to start at
scen.params$scen = start.at:( nrow(scen.params) + start.at - 1 )
sim.reps = 1  # reps to run in this iterate
# set the number of local cores
registerDoParallel(cores=8)
scen = 1
# data.frame(scen.params %>% filter(scen.name == scen))
# just to avoid errors in doParallel script below
jobname = "job_1"
i = 1
}
.p = data.frame(
#rep.methods = "gold ; CC ; MICE-std ; Am-std ; MICE-ours ; MICE-ours-pred ; Am-ours",
rep.methods = "gold ; MICE-std ; Am-std",
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
# MICE parameters
# as on cluster
imp_m = 5,  # CURRENTLY SET LOW
imp_maxit = 100,
mice_method = "norm",
# # for quicker sims
# imp_m = 5,
# imp_maxit = 5,
# N = c(100),
#dag_name = c( "1B", "1D", "1G", "1H" ),
dag_name = "1J"
)
sim_data(.p)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
head(du)
cor(du %>% select(A1, B1, C1, D1))
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
.p = data.frame(
model = "OLS",
#coef_of_interest = "A:C",  # "(Intercept)" or "A"
coef_of_interest = "A",
N = c(1000),
dag_name = "1J"
)
sim_data(.p)
cor(du %>% select(A1, B1, C1, D1))
# PRELIMINARIES -----------------------------------------
path = "/home/groups/manishad/IWN"
setwd(path)
setwd(here())
source("helper_IWN.R")
allPackages = c("here",
"crayon",
"dplyr",
"foreach",
"doParallel",
"data.table",
"purrr",
"ggplot2",
"ggmice",
"tidyr",
"tibble",
"testthat",
"Hmisc",
"stringr")
( packagesNeeded = allPackages[ !( allPackages %in% installed.packages()[,"Package"] ) ] )
if( length(packagesNeeded) > 0 ) install.packages(packagesNeeded)
# load all packages
lapply( allPackages,
require,
character.only = TRUE)
setwd(here())
source("helper_IWN.R")
# most parameters don't matter, so set to NULL
p = tidyr::expand_grid(
rep.methods = NA,
model = "OLS",
coef_of_interest = "A",
imp_m = 50,
imp_maxit = NA,
mice_method = NA,
dag_name = c( "1J" ),
N = c(5000)
)
# ~ Simulate Dataset ------------------------------
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
head(du)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
# ~ Simulate Dataset ------------------------------
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
head(du)
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
allPackages = c("here",
"crayon",
"dplyr",
"foreach",
"doParallel",
"data.table",
"purrr",
"ggplot2",
"ggmice",
"tidyr",
"tibble",
"testthat",
"Hmisc",
"stringr",
"Amelia")
( packagesNeeded = allPackages[ !( allPackages %in% installed.packages()[,"Package"] ) ] )
if( length(packagesNeeded) > 0 ) install.packages(packagesNeeded)
# load all packages
lapply( allPackages,
require,
character.only = TRUE)
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
imp1 = imps_am_std$imputations$imp1
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_am_std = NULL
}
cors = lapply( X = 1:p$imp_m,
FUN = function(.m) cor(complete(imps_mice_std, .m) ) )
cors = lapply( X = 1:p$imp_m,
FUN = function(.m) cor(complete(imps_am_std, .m) ) )
str(imps_am_std$imputations)
?amelia
cor(imps_am_std$imputations[[2]])
cors = lapply( X = 1:p$imp_m,
FUN = function(.m) cor( imps_am_std$imputations[[.m]] ) )
( mean_cor_imps = Reduce("+", cors) / length(cors) )
# compare to underlying dataset
cor(du)
# compare to underlying dataset
cor(du %>%
select(-contains("R"), -contains("1") ) )
# compare to underlying dataset
cor(du %>%
select(-contains("R"), -contains("1") ),
na.rm = TRUE)
?cor
proxy_cor = function(.du) {
cor(.du %>%
select(-contains("R"), -contains("1"),
na.rm = TRUE)
}
proxy_cor = function(.du) {
cor(.du %>%
select( -contains("R"), -contains("1") ),
na.rm = TRUE )
}
# correlation of counterfactuals in du only
cfact_cor = function(.du) {
cor(.du %>%
select( contains("1") ),
na.rm = TRUE)
}
# compare to underlying dataset
proxy_cor(du)
.du=du
cor(.du %>%
select( -contains("R"), -contains("1") ))
cor(.du %>%
select( -contains("R"), -contains("1") ),
use = "complete.obs" )
cor(.du %>%
select( -contains("R"), -contains("1") ),
use = "pairwise.complete.obs" )
cor(.du %>%
select( contains("1") ) )
# compare to underlying dataset
cfact_cor(du)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
# compare to underlying dataset
cfact_cor(du)
( mean_cor_imps = Reduce("+", cors) / length(cors) )
temp = .du %>%
select( -contains("R"), -contains("1") )
head(temp)
temp = .du %>%
select( contains("1") ) %>% select(sort(names(.)))
head(temp)
# correlation of proxies in du only
# i.e., not variables with "R" or "1"
proxy_cor = function(.du) {
temp = .du %>%
select( -contains("R"), -contains("1") ) %>% select(sort(names(.)))
cor(temp, use = "pairwise.complete.obs" )
}
# correlation of counterfactuals in du only
cfact_cor = function(.du) {
temp = .du %>%
select( contains("1") ) %>% select(sort(names(.)))
cor(temp )
}
cors = lapply( X = 1:p$imp_m,
FUN = function(.m) cor( imps_am_std$imputations[[.m]] ) )
( mean_cor_imps = Reduce("+", cors) / length(cors) )
# compare to underlying dataset
cfact_cor(du)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
# ~ Simulate Dataset ------------------------------
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
#### Proportion missing by variable
colMeans(is.na(du))
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
imp1 = imps_am_std$imputations$imp1
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_am_std = NULL
}
cors = lapply( X = 1:p$imp_m,
FUN = function(.m) cor( imps_am_std$imputations[[.m]] ) )
( mean_cor_imps = Reduce("+", cors) / length(cors) )
# compare to underlying dataset
cfact_cor(du)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
imp1 = imps_am_std$imputations$imp1
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_am_std = NULL
}
cors = lapply( X = 1:p$imp_m,
FUN = function(.m) cor( imps_am_std$imputations[[.m]] ) )
( mean_cor_imps = Reduce("+", cors) / length(cors) )
# compare to underlying dataset
cfact_cor(du)
options(scipen=999)
round( cor(temp), 3 )
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
( mean_cor_imps = Reduce("+", cors) / length(cors) )
mode(imps_am_std)
class(imps_am_std)
length(imps_am_std)
length(imps_am_std$imputations)
?mice
library(mice)
?mice
fake = mice(du)
class(fake)
fake$m
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
# correlation in imputations
imps_cor(imps_am_std)
# compare to underlying dataset
cfact_cor(du)
fit_regression(form_string = "B ~ A + C * D",
model = "OLS",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
mean(du$B1)
# logistic
fit_regression(form_string = "I(B>0) ~ A + C * D",
model = "OLS",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
# logistic
fit_regression(form_string = "I(B>0) ~ A + C * D",
model = "logistic",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
form_string = "I(B>0) ~ A + C * D"
glm( eval( parse(text = form_string) ),
data = dat,
family = binomial(link = "logit") )
glm( eval( parse(text = "I(B1>0) ~ A1 + C1 * D1") ),
data = du,
family = binomial(link = "logit") )
summary( glm( eval( parse(text = "I(B1>0) ~ A1 + C1 * D1") ),
data = du,
family = binomial(link = "logit") ) )
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
imp1 = imps_am_std$imputations$imp1
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_am_std = NULL
}
# correlation in imputations
imps_cor(imps_am_std)
# compare to underlying dataset
cfact_cor(du)
### Analysis models
# OLS
fit_regression(form_string = "B ~ A + C * D",
model = "OLS",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
# strength of confounding in general pop
summary(lm(B1 ~ A1 + C1*D1))
# strength of confounding in general pop
summary(lm(B1 ~ A1 + C1*D1), data = du)
# strength of confounding in general pop
summary(lm(B1 ~ A1 + C1*D1, data = du))
summary(lm(B1 ~ A1, data = du))
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
### Make imputations
imp1 = imps_am_std$imputations$imp1
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_am_std = NULL
}
### Correlation in imputations vs. underlying
# correlation in imputations
imps_cor(imps_am_std)
# compare to underlying dataset
cfact_cor(du)
# strength of confounding in general pop
summary(lm(B1 ~ A1 + C1*D1, data = du))
summary(lm(B1 ~ A1, data = du))
# OLS
fit_regression(form_string = "B ~ A + C * D",
model = "OLS",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
### Make imputations
imp1 = imps_am_std$imputations$imp1
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_am_std = NULL
}
# correlation in imputations
imps_cor(imps_am_std)
# compare to underlying dataset
cfact_cor(du)
# OLS
fit_regression(form_string = "B ~ A + C * D",
model = "OLS",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
# strength of confounding in general pop
# I want these to differ wrt coef of A
summary(lm(B1 ~ A1 + C1*D1, data = du))
# compare to underlying dataset
cfact_cor(du)
