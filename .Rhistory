imps_am_std = NULL
}
cors = lapply( X = 1:p$imp_m,
FUN = function(.m) cor( imps_am_std$imputations[[.m]] ) )
( mean_cor_imps = Reduce("+", cors) / length(cors) )
# compare to underlying dataset
cfact_cor(du)
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
imp1 = imps_am_std$imputations$imp1
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_am_std = NULL
}
cors = lapply( X = 1:p$imp_m,
FUN = function(.m) cor( imps_am_std$imputations[[.m]] ) )
( mean_cor_imps = Reduce("+", cors) / length(cors) )
# compare to underlying dataset
cfact_cor(du)
options(scipen=999)
round( cor(temp), 3 )
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
( mean_cor_imps = Reduce("+", cors) / length(cors) )
mode(imps_am_std)
class(imps_am_std)
length(imps_am_std)
length(imps_am_std$imputations)
?mice
library(mice)
?mice
fake = mice(du)
class(fake)
fake$m
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
# correlation in imputations
imps_cor(imps_am_std)
# compare to underlying dataset
cfact_cor(du)
fit_regression(form_string = "B ~ A + C * D",
model = "OLS",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
mean(du$B1)
# logistic
fit_regression(form_string = "I(B>0) ~ A + C * D",
model = "OLS",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
# logistic
fit_regression(form_string = "I(B>0) ~ A + C * D",
model = "logistic",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
form_string = "I(B>0) ~ A + C * D"
glm( eval( parse(text = form_string) ),
data = dat,
family = binomial(link = "logit") )
glm( eval( parse(text = "I(B1>0) ~ A1 + C1 * D1") ),
data = du,
family = binomial(link = "logit") )
summary( glm( eval( parse(text = "I(B1>0) ~ A1 + C1 * D1") ),
data = du,
family = binomial(link = "logit") ) )
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
imp1 = imps_am_std$imputations$imp1
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_am_std = NULL
}
# correlation in imputations
imps_cor(imps_am_std)
# compare to underlying dataset
cfact_cor(du)
### Analysis models
# OLS
fit_regression(form_string = "B ~ A + C * D",
model = "OLS",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
# strength of confounding in general pop
summary(lm(B1 ~ A1 + C1*D1))
# strength of confounding in general pop
summary(lm(B1 ~ A1 + C1*D1), data = du)
# strength of confounding in general pop
summary(lm(B1 ~ A1 + C1*D1, data = du))
summary(lm(B1 ~ A1, data = du))
source("~/Dropbox/Personal computer/Independent studies/2023/*IWN (Imputation without nightMARs)/Simulation code/helper_IWN.R")
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
### Make imputations
imp1 = imps_am_std$imputations$imp1
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_am_std = NULL
}
### Correlation in imputations vs. underlying
# correlation in imputations
imps_cor(imps_am_std)
# compare to underlying dataset
cfact_cor(du)
# strength of confounding in general pop
summary(lm(B1 ~ A1 + C1*D1, data = du))
summary(lm(B1 ~ A1, data = du))
# OLS
fit_regression(form_string = "B ~ A + C * D",
model = "OLS",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
sim_obj = sim_data(.p = p)
du = sim_obj$du
di_std = sim_obj$di_std
di_ours = sim_obj$di_ours
imps_am_std = amelia( as.data.frame(di_std),
m=p$imp_m,
p2s = 0 # don't print output
)
### Make imputations
imp1 = imps_am_std$imputations$imp1
if ( any(is.na(imp1)) ) {
message("MI left NAs in dataset - what a butt")
imps_am_std = NULL
}
# correlation in imputations
imps_cor(imps_am_std)
# compare to underlying dataset
cfact_cor(du)
# OLS
fit_regression(form_string = "B ~ A + C * D",
model = "OLS",
coef_of_interest = "A",
miss_method = "MI",
du = NULL,
imps = imps_am_std)
# strength of confounding in general pop
# I want these to differ wrt coef of A
summary(lm(B1 ~ A1 + C1*D1, data = du))
# compare to underlying dataset
cfact_cor(du)
sum(c(17.7, 4, 8))
sum(c(17.7, 4, 8, 5, 5))
# PRELIMINARIES ---------------------------------------------------------------
# This script uses renv to preserve the R environment specs (e.g., package versions.)
library(renv)
# run this if you want to reproduce results using the R environment we had:
# renv::restore()
to.load = c("dplyr",
"data.table",
"purrr",
"tidyr",
"stringr",
"tibble",
"ggplot2",
"testthat",
"plotly",
"htmlwidgets", # for saving plotly
"here",
"xtable",
"readxl")
# load within installation if needed
for (pkg in to.load) {
cat( paste("\nAbout to try loading package", pkg) )
tryCatch({
# eval below needed because library() will otherwise be confused
# https://www.mitchelloharawild.com/blog/loading-r-packages-in-a-loop/
eval( bquote( library( .(pkg) ) ) )
}, error = function(err) {
install.packages(pkg)
})
}
# run this only if you want to update the R environment specs
# renv::snapshot()
# set working directories
code.dir = here()
data.dir = str_replace_all( string = here(),
replacement = "Simulation results/2024-06-13 - rerun 1B, 1D, 1Fb",
pattern = "Simulation code" )
results.dir = str_replace_all( string = here(),
replacement = "Simulation results/Working results",
pattern = "Simulation code" )
setwd(results.dir)  # check it
overleaf.dir.stats = "/Users/mmathur/Dropbox/Apps/Overleaf/IWN: Imputation without nightMARs (Overleaf)/R_objects"
setwd(overleaf.dir.stats)  # check it
# get helper fns
setwd(code.dir)
source("helper_IWN.R")
# no sci notation
options(scipen=999)
# get simulation data
# already aggregated by stitch_on_sherlock_IWN.R
setwd(data.dir)
aggo = read_excel("2024-06-13 agg.xlsx")
View(aggo)
.aggo = aggo
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "A"] = "E[B | A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "A"] = "E[A | B]"
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$coef_of_interest == "A"] = "E[B | A]"
# check it
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
aggo$dag_name_pretty = aggo$dag_name
aggo$dag_name_pretty[ aggo$dag_name == "1B" ] = "DAG (a)"
aggo$dag_name_pretty[ aggo$dag_name == "1D" ] = "DAG (b)"
aggo$dag_name_pretty[ aggo$dag_name == "1Fb" ] = "DAG (c)"
aggo$method_pretty = aggo$method
aggo$method_pretty[ aggo$method == "gold" ] = "Benchmark"
aggo$method_pretty[ aggo$method == "CC" ] = "Complete-case"
aggo$method_pretty[ aggo$method == "Am-std" ] = "Amelia (standard)"
aggo$method_pretty[ aggo$method == "Am-ours" ] = "Amelia (m-backdoor)"
aggo$method_pretty[ aggo$method == "MICE-std" ] = "MICE (standard)"
aggo$method_pretty[ aggo$method == "Am-ours" ] = "MICE (m-backdoor)"
.aggo = aggo
wrangle_agg_data = function(.aggo) {
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$coef_of_interest == "A"] = "E[B | A]"
# check it
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
aggo$dag_name_pretty = aggo$dag_name
aggo$dag_name_pretty[ aggo$dag_name == "1B" ] = "DAG (a)"
aggo$dag_name_pretty[ aggo$dag_name == "1D" ] = "DAG (b)"
aggo$dag_name_pretty[ aggo$dag_name == "1Fb" ] = "DAG (c)"
aggo$method_pretty = aggo$method
aggo$method_pretty[ aggo$method == "gold" ] = "Benchmark"
aggo$method_pretty[ aggo$method == "CC" ] = "Complete-case"
aggo$method_pretty[ aggo$method == "Am-std" ] = "Amelia (standard)"
aggo$method_pretty[ aggo$method == "Am-ours" ] = "Amelia (m-backdoor)"
aggo$method_pretty[ aggo$method == "MICE-std" ] = "MICE (standard)"
aggo$method_pretty[ aggo$method == "Am-ours" ] = "MICE (m-backdoor)"
}
agg = wrangle_agg_data(.aggo = aggo)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = aggo %>% filter(method %in% method_keepers)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
.aggo = aggo
wrangle_agg_data = function(.aggo) {
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$coef_of_interest == "A"] = "E[B | A]"
# check it
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
agg$dag_name_pretty = agg$dag_name
agg$dag_name_pretty[ agg$dag_name == "1B" ] = "DAG (a)"
agg$dag_name_pretty[ agg$dag_name == "1D" ] = "DAG (b)"
agg$dag_name_pretty[ agg$dag_name == "1Fb" ] = "DAG (c)"
agg$method_pretty = agg$method
agg$method_pretty[ agg$method == "gold" ] = "Benchmark"
agg$method_pretty[ agg$method == "CC" ] = "Complete-case"
agg$method_pretty[ agg$method == "Am-std" ] = "Amelia (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "Amelia (m-backdoor)"
agg$method_pretty[ agg$method == "MICE-std" ] = "MICE (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "MICE (m-backdoor)"
return(agg)
}
agg = wrangle_agg_data(.aggo = aggo)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = aggo %>% filter(method %in% method_keepers)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
names(agg)
t = agg %>% select(dag_name_pretty, coef_name_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover)
wrangle_agg_data = function(.aggo) {
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$coef_of_interest == "A"] = "E[B | A]"
# check it
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
agg$dag_name_pretty = agg$dag_name
agg$dag_name_pretty[ agg$dag_name == "1B" ] = "DAG (a)"
agg$dag_name_pretty[ agg$dag_name == "1D" ] = "DAG (b)"
agg$dag_name_pretty[ agg$dag_name == "1Fb" ] = "DAG (c)"
agg$method_pretty = agg$method
agg$method_pretty[ agg$method == "gold" ] = "Benchmark"
agg$method_pretty[ agg$method == "CC" ] = "Complete-case"
agg$method_pretty[ agg$method == "Am-std" ] = "Amelia (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "Amelia (m-backdoor)"
agg$method_pretty[ agg$method == "MICE-std" ] = "MICE (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "MICE (m-backdoor)"
return(agg)
}
agg = wrangle_agg_data(.aggo = aggo)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = aggo %>% filter(method %in% method_keepers)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover)
agg = wrangle_agg_data(.aggo = aggo)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = agg %>% filter(method %in% method_keepers)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover)
View(t)
agg = droplevels(agg)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover)
View(t)
wrangle_agg_data = function(.aggo) {
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$coef_of_interest == "A"] = "E[B | A]"
# check it
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
agg$dag_name_pretty = agg$dag_name
agg$dag_name_pretty[ agg$dag_name == "1B" ] = "DAG (a)"
agg$dag_name_pretty[ agg$dag_name == "1D" ] = "DAG (b)"
agg$dag_name_pretty[ agg$dag_name == "1Fb" ] = "DAG (c)"
agg$method_pretty = agg$method
agg$method_pretty[ agg$method == "gold" ] = "Benchmark"
agg$method_pretty[ agg$method == "CC" ] = "Complete-case"
agg$method_pretty[ agg$method == "Am-std" ] = "Amelia (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "Amelia (m-backdoor)"
agg$method_pretty[ agg$method == "MICE-std" ] = "MICE (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "MICE (m-backdoor)"
return(agg)
}
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method_pretty)
table(agg$method)
table(aggo$method)
setwd(data.dir)
aggo = read_excel("2024-06-13 agg.xlsx")
#bm: decide how to present this to make it similar to Table 1 :)
# TEMP
.aggo = aggo
table(aggo$method)
setwd(data.dir)
list.files()
aggo = read_excel("2024-06-13 agg.xlsx")
aggo$method
table(aggo$method)
wrangle_agg_data = function(.aggo) {
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$coef_of_interest == "A"] = "E[B | A]"
# check it
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
agg$dag_name_pretty = agg$dag_name
agg$dag_name_pretty[ agg$dag_name == "1B" ] = "DAG (a)"
agg$dag_name_pretty[ agg$dag_name == "1D" ] = "DAG (b)"
agg$dag_name_pretty[ agg$dag_name == "1Fb" ] = "DAG (c)"
agg$method_pretty = agg$method
agg$method_pretty[ agg$method == "gold" ] = "Benchmark"
agg$method_pretty[ agg$method == "CC" ] = "Complete-case"
agg$method_pretty[ agg$method == "Am-std" ] = "Amelia (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "Amelia (m-backdoor)"
agg$method_pretty[ agg$method == "MICE-std" ] = "MICE (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "MICE (m-backdoor)"
return(agg)
}
wrangle_agg_data = function(.aggo) {
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$coef_of_interest == "A"] = "E[B | A]"
# check it
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
agg$dag_name_pretty = agg$dag_name
agg$dag_name_pretty[ agg$dag_name == "1B" ] = "DAG (a)"
agg$dag_name_pretty[ agg$dag_name == "1D" ] = "DAG (b)"
agg$dag_name_pretty[ agg$dag_name == "1Fb" ] = "DAG (c)"
agg$method_pretty = agg$method
agg$method_pretty[ agg$method == "gold" ] = "Benchmark"
agg$method_pretty[ agg$method == "CC" ] = "Complete-case"
agg$method_pretty[ agg$method == "Am-std" ] = "Amelia (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "Amelia (m-backdoor)"
agg$method_pretty[ agg$method == "MICE-std" ] = "MICE (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "MICE (m-backdoor)"
return(agg)
}
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method)
table(agg$method_pretty)
.aggo = aggo
wrangle_agg_data = function(.aggo) {
agg = .aggo
# recode variables
agg$coef_of_interest_pretty = agg$coef_of_interest
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1B", "1D") & agg$coef_of_interest == "(Intercept)"] = "E[A]"
agg$coef_of_interest_pretty[ agg$dag_name %in% c("1Fb") & agg$coef_of_interest == "(Intercept)"] = "E[B]"
agg$coef_of_interest_pretty[ agg$coef_of_interest == "A"] = "E[B | A]"
# check it
agg %>% group_by(dag_name, coef_of_interest) %>%
summarise(unique(coef_of_interest_pretty))
agg$dag_name_pretty = agg$dag_name
agg$dag_name_pretty[ agg$dag_name == "1B" ] = "DAG (a)"
agg$dag_name_pretty[ agg$dag_name == "1D" ] = "DAG (b)"
agg$dag_name_pretty[ agg$dag_name == "1Fb" ] = "DAG (c)"
agg$method_pretty = agg$method
agg$method_pretty[ agg$method == "gold" ] = "Benchmark"
agg$method_pretty[ agg$method == "CC" ] = "Complete-case"
agg$method_pretty[ agg$method == "Am-std" ] = "Amelia (standard)"
agg$method_pretty[ agg$method == "Am-ours" ] = "Amelia (m-backdoor)"
agg$method_pretty[ agg$method == "MICE-std" ] = "MICE (standard)"
agg$method_pretty[ agg$method == "MICE-ours" ] = "MICE (m-backdoor)"
return(agg)
}
agg = wrangle_agg_data(.aggo = aggo)
table(agg$method_pretty)
method_keepers = c("gold", "CC", "Am-std", "Am-ours", "MICE-std", "MICE-ours")
agg = agg %>% filter(method %in% method_keepers)
agg = droplevels(agg)
# reorder methods
correct_order = c("Benchmark", "Complete-case", "Amelia (standard)", "MICE (standard)", "Amelia (m-backdoor)", "MICE (m-backdoor)")
agg$method_pretty = factor(agg$method_pretty, levels = correct_order)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover)
View(t)
levels(agg$method_pretty)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover) %>%
arrange( method_pretty )
View(t)
t = agg %>% select(dag_name_pretty, coef_of_interest_pretty, method_pretty, BhatBias, BhatRMSE, BhatCover) %>%
arrange( dag_name_pretty, coef_of_interest_pretty, method_pretty )
View(t)
t %>%
group_by(grp = (row_number() + 1) %/% 2 ) %>%
group_modify(~ add_row(.x, x = rep(NA, ncol(t)))) %>%
ungroup() %>%
select(-grp)
# insert spacer rows for legibility
t = t %>% add_row(.after = 6,
NA)
?add_row
# insert spacer rows for legibility
t = t %>% add_row(.after = 6,
all_of(names(t)) = NA)
dput(names(t))
xtable(t)
print( xtable(t), row.names = FALSE)
print( xtable(t), include.rownames = FALSE)
?print.xtable
